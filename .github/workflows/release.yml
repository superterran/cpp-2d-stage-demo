name: Fantasy Dev Builds
on:
  push:
    tags:
    - 'v*'
  schedule:
  - cron: '0 19 * * *'
jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      if: github.event_name == 'schedule'
    - name: Create tag
      id: create_tag
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          tag=builds-$(date +%Y%m%d-%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "::set-output name=tag::$tag"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag }}
        release_name: ${{ steps.create_tag.outputs.tag }}
        draft: true
        prerelease: false
    - name: Create artifact files
      run: |
        mkdir info
        echo "${{ steps.create_release.outputs.id }}" > info/release_id
        echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
    - uses: actions/upload-artifact@v1
      with:
        name: info
        path: info

  build:
    needs: [release]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04 ] #macos-latest
        name: [ head, debug ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set upload_url
      id: upload_info
      run: |
        upload_url=$(cat info/upload_url)
        echo "::set-output name=upload_url::$upload_url"
    - name: Ubuntu Install
      run: make install
      if: startsWith(matrix.os, 'ubuntu')
    - run: make install
      if: startsWith(matrix.os, 'ubuntu')

    # Build
    - run: make compile
    - name: Create archive
      run: tar czf fantasy-${{ matrix.name }}-${{ matrix.os }}.tar.gz -C ~/bin fantasy-${{ matrix.name }}
    - name: Upload Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload_info.outputs.upload_url }}
        asset_path: fantasy-${{ matrix.name }}-${{ matrix.os }}.tar.gz
        asset_name: fantasy-${{ matrix.name }}-${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip

  metadata:
    name: Publish Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set publish_info
      id: publish_info
      run: |
        release_id=$(cat info/release_id)
        echo "::set-output name=release_id::$release_id"
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.publish_info.outputs.release_id }}
    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 3